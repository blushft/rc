package rc

import (
	"net/url"
	"time"
)

// Generated by https://quicktype.io

type Me struct {
	ID               string       `json:"_id"`
	Name             string       `json:"name"`
	Emails           []Email      `json:"emails"`
	Status           string       `json:"status"`
	StatusConnection string       `json:"statusConnection"`
	Username         string       `json:"username"`
	UTCOffset        int64        `json:"utcOffset"`
	Active           bool         `json:"active"`
	Roles            []string     `json:"roles"`
	Settings         Settings     `json:"settings"`
	CustomFields     CustomFields `json:"customFields"`
	Success          bool         `json:"success"`
}

type CustomFields map[string]interface{}

type Email struct {
	Address  string `json:"address"`
	Verified bool   `json:"verified"`
}

type Settings struct {
	Preferences Preferences `json:"preferences"`
}

type Preferences struct {
	EnableAutoAway              bool   `json:"enableAutoAway"`
	IdleTimeoutLimit            int64  `json:"idleTimeoutLimit"`
	DesktopNotificationDuration int64  `json:"desktopNotificationDuration"`
	AudioNotifications          string `json:"audioNotifications"`
	DesktopNotifications        string `json:"desktopNotifications"`
	MobileNotifications         string `json:"mobileNotifications"`
	UnreadAlert                 bool   `json:"unreadAlert"`
	UseEmojis                   bool   `json:"useEmojis"`
	ConvertASCIIEmoji           bool   `json:"convertAsciiEmoji"`
	AutoImageLoad               bool   `json:"autoImageLoad"`
	SaveMobileBandwidth         bool   `json:"saveMobileBandwidth"`
	CollapseMediaByDefault      bool   `json:"collapseMediaByDefault"`
	HideUsernames               bool   `json:"hideUsernames"`
	HideRoles                   bool   `json:"hideRoles"`
	HideFlexTab                 bool   `json:"hideFlexTab"`
	HideAvatars                 bool   `json:"hideAvatars"`
	RoomsListExhibitionMode     string `json:"roomsListExhibitionMode"`
	SidebarViewMode             string `json:"sidebarViewMode"`
	SidebarHideAvatar           bool   `json:"sidebarHideAvatar"`
	SidebarShowUnread           bool   `json:"sidebarShowUnread"`
	SidebarShowFavorites        bool   `json:"sidebarShowFavorites"`
	SendOnEnter                 string `json:"sendOnEnter"`
	MessageViewMode             int64  `json:"messageViewMode"`
	EmailNotificationMode       string `json:"emailNotificationMode"`
	RoomCounterSidebar          bool   `json:"roomCounterSidebar"`
	NewRoomNotification         string `json:"newRoomNotification"`
	NewMessageNotification      string `json:"newMessageNotification"`
	MuteFocusedConversations    bool   `json:"muteFocusedConversations"`
	NotificationsSoundVolume    int64  `json:"notificationsSoundVolume"`
}

type prefEnv struct {
	Success bool `json:"success"`
	Settings
}

type UserList struct {
	Users  []User `json:"users"`
	Status string `json:"status"`
}

type UserEnv struct {
	User    User `json:"user"`
	Success bool `json:"success"`
}

type User struct {
	ID        string `json:"_id"`
	Name      string `json:"name"`
	Username  string `json:"username"`
	Status    string `json:"status"`
	UTCOffset int64  `json:"utcOffset"`
	Active    bool   `json:"active"`
	Type      string `json:"type"`
}

type UserPresence struct {
	Users   []User `json:"users"`
	Full    bool   `json:"full"`
	Success bool   `json:"success"`
}

func (c *Client) GetUsers() ([]User, error) {
	users := &UserList{}
	if err := c.c.get("/users.list", nil).JSON(users); err != nil {
		return nil, err
	}

	return users.Users, nil
}

func (c *Client) getUser(vals url.Values) (*User, error) {
	userW := &UserEnv{}
	if err := c.c.get("/users.info", vals).JSON(userW); err != nil {
		return nil, err
	}

	user := userW.User
	return &user, nil
}

func (c *Client) GetUserByName(username string) (*User, error) {
	return c.getUser(query("username", username).Q())
}

func (c *Client) GetUserByID(id string) (*User, error) {
	return c.getUser(query("userId", id).Q())
}

func (c *Client) GetUsersPresence(from *time.Time) ([]User, error) {
	userP := &UserPresence{}
	vals := url.Values{}
	if from != nil {
		vals = query("from", from.Format(TimeFormat)).Q()
	}

	if err := c.c.get("/users.presence", vals).JSON(userP); err != nil {
		return nil, err
	}
	return userP.Users, nil
}

func (c *Client) GetMyPreferences() (*Preferences, error) {
	userP := &prefEnv{}
	if err := c.c.get("/users/getPreferences", nil).JSON(userP); err != nil {
		return nil, err
	}
	p := userP.Preferences
	return &p, nil
}
